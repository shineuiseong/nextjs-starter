{
  "root": true,
  "parser": "@typescript-eslint/parser",
  "plugins": [
    "@typescript-eslint",
    "import",
    "react",
    "unused-imports",
    "@typescript-eslint",
    "prettier"
  ],
  "extends": [
    "next/core-web-vitals",
    "eslint:recommended",
    "plugin:import/recommended",
    "plugin:import/typescript",
    "plugin:react/recommended",
    "plugin:@typescript-eslint/recommended",
    "prettier"
  ],

  "rules": {
    "no-unused-vars": "off",
    // ㄴunused-imports 기본 세팅 1 >> 사용되지 않은 변수에 대한 경고를 비활성화합니다.
    "unused-imports/no-unused-imports": "error",
    // ㄴunused-imports 기본 세팅 2 >> 사용되지 않은 import에 대한 경고를 활성화합니다.
    "import/no-unresolved": "error",
    // ㄴeslint-import-resolver-typescript 필수옵션 1
    // >> import 경로가 잘못된 경우 경고를 활성화합니다.
    "react/react-in-jsx-scope": "off",
    // ㄴ JSX를 사용할 때 React를 import할 필요가 없도록 합니다.
    "no-unsafe-optional-chaining": 1,
    "react/no-unknown-property": [
      2,
      {
        "ignore": ["jsx", "global"]
        // ㄴnext.js에서 global style 사용시 쓰는 문법에서 "<style jsx global></style>"
        //  알수없는 property라는 에러가 나는데, 해당에러를 무시하기 위한 setting
      }
    ]
  },
  "settings": {
    "react": {
      "version": "detect"
      // ㄴ프로젝트에 설치된 리액트 버전을 자동으로 감지하도록 설정
    },
    "import/parsers": {
      "@typescript-eslint/parser": [".{ts,tsx}"]
    }, // ㄴ TypeScript 파일을 분석할 때는 @typescript-eslint/parser를 사용하도록 설정한다.
    "import/resolver": {
      "node": {
        "extensions": [".js", ".jsx", ".ts", ".tsx"]
      },
      "typescript": { "alwaysTryTypes": true }
      // ㄴtrue일 경우, TypeScript 확장자(.ts, .tsx)가 포함된 파일의 경우,
      // 타입 선언 파일(.d.ts)이 존재하지 않더라도 항상 타입 체크를 시도하겠다는 의미입니다.
    }
  },
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true
      // ㄴJSX 지원하도록 설정
    },
    "sourceType": "module",
    // ㄴeslint-plugin-import 필수 설정 1
    "ecmaVersion": "latest",
    // ㄴeslint-plugin-import 필수 설정 2
    "project": "./tsconfig.json"
    // ㄴtsconfig 파일위치를 지정
    // >> 설정하지 않으면 현재 디렉토리에서 가장 가까운 tsconfig로 설정된다
  }
}
